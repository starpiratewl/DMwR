#############################################
## import the data
#############################################
library(DMwR)

head(algae)


#############################################
## get the general idea about the dataset
#############################################

summary(algae)

## view the distribution of data concerning to a specific variable
hist(algae$mxPH, prob = T)

hist(algae$mxPH, prob = F) ## this will give the counts of frequency

## view Q-Q map to see if the distribution of a specific variable conform to the normal distribution
library(car)
par(mfrow = c(1,2))     ## set the figures to show at one row and two columns
hist(algae$mxPH, prob = T, xlab = "", main = "Histgram of maximum pH value", ylim = 0:1)
lines(density(algae$mxPH,na.rm = T))      ## add a smooth line of the distribution of the data
rug(jitter(algae$mxPH))                  ## add the density dots under the X axis to help to find the outliers
qq.plot(algae$mxPH, main = "Normal QQ plot of maximum pH")    ## the dots in the dash lines are indicating the data fitted in the 95% confidence intervl, the dots are not in the dash lines are indicating the data which do not conform to the normal distribution.
par(mfrow = c(1,1))



## view the distribution of data concerning to a specific variable via boxplot
boxplot(algae$oPO4, ylab = "Orthophosphate (oOP4)")
rug(jitter(algae$oPO4), side= 2)
abline(h = mean(algae$oPO4, na.rm = T), lty = 2)


## identify the outliers of the dataset
plot(algae$NH4, xlab = "")
abline(h = mean(algae$NH4, na.rm = T), lty = 1)
abline(h = mean(algae$NH4, na.rm = T) + sd(algae$NH4, na.rm = T), lty = 2)
identify(algae$NH4)
## press esc or right click to quit the identification of the dots(the number of rows of the dot you identified will appear on the plot)


## examine the dots you identified on the plot\
plot(algae$NH4, xlab = "")
clicked.lines <- identify(algae$NH4)
algae[clicked.lines, ]


## identify the rows which NH4 is more than 19000
algae[algae$NH4 > 19000, ]
##     season   size speed mxPH mnO2     Cl   NO3   NH4 oPO4 PO4 Chla  a1 a2 a3  a4  a5   a6 a7
##NA     <NA>   <NA>  <NA>   NA   NA     NA    NA    NA   NA  NA   NA  NA NA NA  NA  NA   NA NA
##153  autumn medium  high  7.3 11.8 44.205 45.65 24064   44  34 53.1 2.2  0  0 1.2 5.9 77.6  0
##NA.1   <NA>   <NA>  <NA>   NA   NA     NA    NA    NA   NA  NA   NA  NA NA NA  NA  NA   NA NA
##there are NAs in the result here, this is not the form we prefer, so the alternative solution is as follows:

algae[!is.na(algae$NH4)&algae$NH4 > 19000, ]
##    season   size speed mxPH mnO2     Cl   NO3   NH4 oPO4 PO4 Chla  a1 a2 a3  a4  a5   a6 a7
##153 autumn medium  high  7.3 11.8 44.205 45.65 24064   44  34 53.1 2.2  0  0 1.2 5.9 77.6  0



## use lattice to examine the data distribution of certain variables according to nominal variables
library(lattice)
bwplot(size ~ a1, data = algae, ylab = "River Size", xlab = "Algae A1")
## through this figure we can find that a1 has high frequency in small rivers, this is very useful statistical information


##use Hmisc package to achieve similar result as above mentioned.
library(Hmisc)
bwplot(size ~ a1, data = algae, panel = panel.bpplot, probs=seq(0.01,0.49,by = 0.01), datadensity = T, ylab = "River Size", xlab = "Algae A1")


##to view the data distribution of a variable according to two other variables
minO2 <- equal.count(na.omit(algae$mnO2), number = 4, overlap = 1/5)
stripplot(season ~ a3|minO2, data = algae[!is.na(algae$mnO2), ])
## here we use equal.count() function to turn the numeric variables to nominal variables




#############################################
## deal with the NAs
#############################################

#############################################
##1, omit method
#############################################

library(DMwR)
data(algae)

##examine the number of NAs, here we find that there are 16 rows containing NAs
algae[!complete.cases(algae),]
nrow(algae[!complete.cases(algae),])

## simply remove all the rows containing NAs
algae_nona <- na.omit(algae)

## sometimes if an observation(row) containing too many NAs, this observation is not useful, it is better to remove it
algae_test <- algae[-c(62,199), ]

## but the method mentioned above is unrealizable when we deal a large dataset, we can not to count all the row numbers of NAs
apply(algae, 1, function(x) sum(is.na(x)))
## here we use apply() function to apply to rows to calculate the NAs of each row.

## or we can use mangNAs() function to pin point the row numbers of the rows containing too many NAs(note that manyNAs() function is not a default function in R, it is created in DMwR package)
data(algae)
manyNAs(algae,0.2)
##in this function wo input the dataset(algae) and the percentage(0.2, means NAs are over 20% of all the variables), then the function will return the rows which fitted the condition.
##remove the NAs with the help of manyNAs() fcuntion
algae_test <- algae[-manyNAs(algae,0.2), ]



#############################################
##2, filling method
#############################################

## substitute the NA with mean, this method fit the variables which conform to the normal distribution, because all the observation are distributed equably around the mean
algae[48,"mxPH"] <- mean(algae$mxPH, na.rm = T)

## substitute the NAs with batch processing
## if the variables do not conform to normal distribution, it not suitable to substitute the NA with mean, because the data distribution has bias, under this circumstance, median is a better choice.
algae[is.na(algae$Chla),"Chla"] <- median(algae$Chla, na,rm = T)

##the centralImputation() function in DMwR package provide the method of substituting the NAs with central trend values(median or mode)
data(algae)
algae_test <- algae[-manyNAs(algae),]
algae_test <- centralImputation(algae_test)




##although filling the NAs with central trend values is very convenient, but sometimes it not good for big dataset, especially not good for datamining, because datamining aims at discovering the relations.
##  so a better choice in dealing wiht NA is substitution NAs with relations to another variable

## find all the correlation values, here the parameter use = "complete.obs" means we omit the NAs
cor(algae[,4:18], use = "complete.obs")

## but the output of cor() function is not very friendly, we can use symnum() function to get a more appropriate result.
symnum(cor(algae[, 4:18], use = "complete.obs"))

## in this output we can find that most variables are not corelated with each other, but there are exceptions. NH4 to NO3, PO4 to oPO4. Further more the relationship between NH4 to NO3 is not so significant(0.72467766), so it is not a good idea to use this relationship to predict missing values, but the relationship between PO4 and oPO4 is significant(0.911964602), so we can make use of that.
data(algae)
algae <- algae[-manyNAs(algae), ]
lm(PO4 ~ oPO4, data = algae)
##Call:
##lm(formula = PO4 ~ oPO4, data = algae)
##
##Coefficients:
##(Intercept)         oPO4  
##     42.897        1.293  

##so the result indicate that PO4 = 42.897 + 1.293*oPO4

## substitute the NAs with the help of linear mode
data(algae)
algae <- algae[-manyNAs(algae), ]
fillPO4 <- function(oP){
  if(is.na(oP))
    return(NA)
  else return(42.897 + 1.293*oP)
}
algae[is.na(algae$PO4),"PO4"] <- sapply(algae[is.na(algae$PO4),"PO4"], fillPO4)


##if we can not find the relationship between the numeric variable, we can turn to find the relationship of specific variable to nominal variables

histogram(~mxPH | season, data = algae)

algae$season <- factor(algae$season, levels = c("spring", "summer","autumn", "winter"))

##redefine the season nominal variable to set the season in a order we are used to see
## this figure seem to show that the mxPH variable do not have any relationship with season nomial value, we should try another

## this figure seem to show that the small the size of river is, the small mxPH value it presents
histogram(~mxPH | size, data = algae)

## this figure present the relationship of mxPH with combination of size and speed variables , in this figure 9 figures are presented and we happen to see that there is a missing in low speed and small size river, only one observation fitted this combination , that is row 48, but this row happened to miss the mxPH value.
histogram(~mxPH | size * speed, data = algae)


## the following figure is another way to discover the relationship of mxPH with the combination of size and speed. The parameter jitter = T is set to tell R to arrange the Y axis value in a random manner, this can avoid the omission of certain concentration due to the overlap of values.
stripplot(size ~ mxPH | speed, data = algae, jitter = T)





## filling the NAs with the comparability of different variables and observations
data(algae)
algae <- algae[-manyNAs(algae), ]

## first we have to define the comparability or similarity, the core concept is the euclidean distance, then according to euclidean distance we try to find the 10 most similar cases(observations),then use the median of the ten similar cases or the weighted mean to substitute the NA, the weighted mean is calculated also via the euclidean distance ,the case with most euclidean distance have the least weight, w(d) = e-d(power). All the ideas can be realized via knnImputation() function in the DMwR package.

algae <- knnImputation(algae, k = 10)

algae <- knnImputation(algae, k = 10, meth = "median")



#############################################
## construct the prediction model(linear)
#############################################

## first we construct the multivariate regression model, in this model functions can not deal with the dataset  containing NAs, we should deal with the NAs at first.

data(algae)
algae <- algae[-manyNAs(algae), ]
clean.algae <- knnImputation(algae, k = 10)


lm.a1 <- lm(a1 ~ ., data = clean.algae[, 1:12])

summary(lm.a1)
##Call:
##lm(formula = a1 ~ ., data = clean.algae[, 1:12])
##
##Residuals:
##    Min      1Q  Median      3Q     Max 
##-37.679 -11.893  -2.567   7.410  62.190 
##
##Coefficients:
##              Estimate Std. Error t value Pr(>|t|)   
##(Intercept)  42.942055  24.010879   1.788  0.07537 . 
##seasonspring  3.726978   4.137741   0.901  0.36892   
##seasonsummer  0.747597   4.020711   0.186  0.85270   
##seasonwinter  3.692955   3.865391   0.955  0.34065   
##sizemedium    3.263728   3.802051   0.858  0.39179   
##sizesmall     9.682140   4.179971   2.316  0.02166 * 
##speedlow      3.922084   4.706315   0.833  0.40573   
##speedmedium   0.246764   3.241874   0.076  0.93941   
##mxPH         -3.589118   2.703528  -1.328  0.18598   
##mnO2          1.052636   0.705018   1.493  0.13715   
##Cl           -0.040172   0.033661  -1.193  0.23426   
##NO3          -1.511235   0.551339  -2.741  0.00674 **
##NH4           0.001634   0.001003   1.628  0.10516   
##oPO4         -0.005435   0.039884  -0.136  0.89177   
##PO4          -0.052241   0.030755  -1.699  0.09109 . 
##Chla         -0.088022   0.079998  -1.100  0.27265   
##---
##Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
##
##Residual standard error: 17.65 on 182 degrees of freedom
##Multiple R-squared:  0.3731,    Adjusted R-squared:  0.3215 
##F-statistic: 7.223 on 15 and 182 DF,  p-value: 2.444e-12


anova(lm.a1)
##Analysis of Variance Table
##
##Response: a1
##           Df Sum Sq Mean Sq F value    Pr(>F)    
##season      3     85    28.2  0.0905 0.9651944    
##size        2  11401  5700.7 18.3088  5.69e-08 ***
##speed       2   3934  1967.2  6.3179 0.0022244 ** 
##mxPH        1   1329  1328.8  4.2677 0.0402613 *  
##mnO2        1   2287  2286.8  7.3444 0.0073705 ** 
##Cl          1   4304  4304.3 13.8239 0.0002671 ***
##NO3         1   3418  3418.5 10.9789 0.0011118 ** 
##NH4         1    404   403.6  1.2963 0.2563847    
##oPO4        1   4788  4788.0 15.3774 0.0001246 ***
##PO4         1   1406  1405.6  4.5142 0.0349635 *  
##Chla        1    377   377.0  1.2107 0.2726544    
##Residuals 182  56668   311.4                      
##---
##Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1


## this result suggest that the season variable contribute the least to the reduction of model fitting error, so we will delete it from the model
lm2.a1 <- update(lm.a1, . ~ . -season)

summary(lm2.a1)
##Call:
##lm(formula = a1 ~ size + speed + mxPH + mnO2 + Cl + NO3 + NH4 + 
##    oPO4 + PO4 + Chla, data = clean.algae[, 1:12])
##
##Residuals:
##    Min      1Q  Median      3Q     Max 
##-36.460 -11.953  -3.044   7.444  63.730 
##
##Coefficients:
##              Estimate Std. Error t value Pr(>|t|)   
##(Intercept) 44.9532874 23.2378377   1.934  0.05458 . 
##sizemedium   3.3092102  3.7825221   0.875  0.38278   
##sizesmall   10.2730961  4.1223163   2.492  0.01358 * 
##speedlow     3.0546270  4.6108069   0.662  0.50848   
##speedmedium -0.2976867  3.1818585  -0.094  0.92556   
##mxPH        -3.2684281  2.6576592  -1.230  0.22033   
##mnO2         0.8011759  0.6589644   1.216  0.22561   
##Cl          -0.0381881  0.0333791  -1.144  0.25407   
##NO3         -1.5334300  0.5476550  -2.800  0.00565 **
##NH4          0.0015777  0.0009951   1.586  0.11456   
##oPO4        -0.0062392  0.0395086  -0.158  0.87469   
##PO4         -0.0509543  0.0305189  -1.670  0.09669 . 
##Chla        -0.0841371  0.0794459  -1.059  0.29096   
##---
##Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
##
##Residual standard error: 17.57 on 185 degrees of freedom
##Multiple R-squared:  0.3682,    Adjusted R-squared:  0.3272 
##F-statistic: 8.984 on 12 and 185 DF,  p-value: 1.762e-13

anova(lm.a1, lm2.a1)
##Analysis of Variance Table
##
##Model 1: a1 ~ season + size + speed + mxPH + mnO2 + Cl + NO3 + NH4 + oPO4 + 
##    PO4 + Chla
##Model 2: a1 ~ size + speed + mxPH + mnO2 + Cl + NO3 + NH4 + oPO4 + PO4 + 
##    Chla
##  Res.Df   RSS Df Sum of Sq      F Pr(>F)
##1    182 56668                           
##2    185 57116 -3   -447.62 0.4792 0.6971


anova(lm2.a1)

...



final.lm <- step(lm.a1)

summary(final.lm)
##Call:
##lm(formula = a1 ~ size + mxPH + Cl + NO3 + PO4, data = clean.algae[, 
##    1:12])
##
##Residuals:
##    Min      1Q  Median      3Q     Max 
##-28.874 -12.732  -3.741   8.424  62.926 
##
##Coefficients:
##            Estimate Std. Error t value Pr(>|t|)    
##(Intercept) 57.28555   20.96132   2.733  0.00687 ** 
##sizemedium   2.80050    3.40190   0.823  0.41141    
##sizesmall   10.40636    3.82243   2.722  0.00708 ** 
##mxPH        -3.97076    2.48204  -1.600  0.11130    
##Cl          -0.05227    0.03165  -1.651  0.10028    
##NO3         -0.89529    0.35148  -2.547  0.01165 *  
##PO4         -0.05911    0.01117  -5.291 3.32e-07 ***
##---
##Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
##
##Residual standard error: 17.5 on 191 degrees of freedom
##Multiple R-squared:  0.3527,    Adjusted R-squared:  0.3324 
##F-statistic: 17.35 on 6 and 191 DF,  p-value: 5.554e-16

## this result suggest that the R2 is still not very good, so this means that the linear model maybe not suitable for the prediction of algae dataset


####################################################
## construct the prediction model(regression tree)
####################################################
library(rpart)
data(algae)
algae <- algae[-manyNAs(algae), ]
rt.a1 <- rpart(a1 ~ ., data = algae[, 1:12])

rt.a1
##n= 198 
##
##node), split, n, deviance, yval
##      * denotes terminal node
##
## 1) root 198 90401.290 16.996460  
##   2) PO4>=43.818 147 31279.120  8.979592  
##     4) Cl>=7.8065 140 21622.830  7.492857  
##       8) oPO4>=51.118 84  3441.149  3.846429 *
##       9) oPO4< 51.118 56 15389.430 12.962500  
##        18) mnO2>=10.05 24  1248.673  6.716667 *
##        19) mnO2< 10.05 32 12502.320 17.646870  
##          38) NO3>=3.1875 9   257.080  7.866667 *
##          39) NO3< 3.1875 23 11047.500 21.473910  
##            78) mnO2< 8 13  2919.549 13.807690 *
##            79) mnO2>=8 10  6370.704 31.440000 *
##     5) Cl< 7.8065 7  3157.769 38.714290 *
##   3) PO4< 43.818 51 22442.760 40.103920  
##     6) mxPH< 7.87 28 11452.770 33.450000  
##      12) mxPH>=7.045 18  5146.169 26.394440 *
##      13) mxPH< 7.045 10  3797.645 46.150000 *
##     7) mxPH>=7.87 23  8241.110 48.204350  
##      14) PO4>=15.177 12  3047.517 38.183330 *
##      15) PO4< 15.177 11  2673.945 59.136360 *

## to view the plot of tree
prettyTree(rt.a1)

##prune the tree
printcp(rt.a1)

rt2.a1 <- prune(rt.a1, cp = 0.08)
rt2.a1
##n= 198
##
##node), split, n, deviance, yval
##      * denotes terminal node
##
##1) root 198 90401.29 16.996460  
##  2) PO4>=43.818 147 31279.12  8.979592 *
##  3) PO4< 43.818 51 22442.76 40.103920 *

## auto prune the tree by use of rpartXse() function which is provided in DMwR package, here the result is the same as the rt2.a1 mentioned above
(rt.a1 <- rpartXse(a1 ~ ., data = algae[, 1:12]))
##n= 198 
##
##node), split, n, deviance, yval
##      * denotes terminal node
##
##1) root 198 90401.29 16.996460  
##  2) PO4>=43.818 147 31279.12  8.979592 *
##  3) PO4< 43.818 51 22442.76 40.103920 *


## to prune the tree by use of snip.rpart() function which is provided in DMwR package.
first.tree <- rpart(a1 ~ ., data = algae[, 1:12])
snip.rpart(first.tree, c(4,7))
##n= 198 
##
##node), split, n, deviance, yval
##      * denotes terminal node
##
## 1) root 198 90401.290 16.996460  
##   2) PO4>=43.818 147 31279.120  8.979592  
##     4) Cl>=7.8065 140 21622.830  7.492857 *
##     5) Cl< 7.8065 7  3157.769 38.714290 *
##   3) PO4< 43.818 51 22442.760 40.103920  
##     6) mxPH< 7.87 28 11452.770 33.450000  
##      12) mxPH>=7.045 18  5146.169 26.394440 *
##      13) mxPH< 7.045 10  3797.645 46.150000 *
##     7) mxPH>=7.87 23  8241.110 48.204350 *



## to prune the tree manually
first.tree <- rpart(a1 ~ ., data = algae[, 1:12])
prettyTree(first.tree)
snip.rpart(first.tree)




####################################################
## how to evaluate the prediction model
####################################################


lm.predictions.a1 <- predict(final.lm, clean.algae)
rt.predictions.a1 <- predict(rt.a1, algae)

## by use of the MAE concept
(mae.a1.lm <- mean(abs(lm.predictions.a1 - algae[,"a1"])))
##[1] 13.10681
(mae.a1.rt <- mean(abs(rt.predictions.a1 - algae[,"a1"])))
##[1] 11.61717

## by use of the MSE concept
(mse.a1.lm <- mean(abs(lm.predictions.a1 - algae[,"a1"])^2))
##[1] 295.5407
(mse.a1.rt <- mean(abs(rt.predictions.a1 - algae[,"a1"])^2))
##[1] 271.3226

## by use of the NMSE concept, the result is better when it turn to be smaller, if more than 1 ,the model is no better than the only mean...
(nmse.a1.lm <- mean((lm.predictions.a1 - algae[,"a1"])^2) / mean((mean(algae[,"a1"]) - algae[,"a1"])^2))
##[1] 0.6473034
(nmse.a1.rt <- mean((rt.predictions.a1 - algae[,"a1"])^2) / mean((mean(algae[,"a1"]) - algae[,"a1"])^2))
##[1] 0.5942601


## by use of regr.eval() function to evaluate the linear model, this function is provided by the DMwR package
regr.eval(algae[,"a1"], rt.predictions.a1, train.y = algae[,"a1"])
##        mae         mse        rmse        mape        nmse        nmae 
## 11.6171709 271.3226161  16.4718735         Inf   0.5942601   0.6953711 

regr.eval(algae[,"a1"], lm.predictions.a1, train.y = algae[,"a1"])
##        mae         mse        rmse        mape        nmse        nmae 
## 13.1068119 295.5406903  17.1912969         Inf   0.6473034   0.7845368 


old.par <- par(mfrow = c(1,2))
plot(lm.predictions.a1, algae[,"a1"], main = "Linear Model", xlab = "Predictions", ylab = "True Values")
abline(0,1, lty = 2)
plot(rt.predictions.a1, algae[,"a1"], main = "Regression Tree", xlab = "predictions", ylab = "True Values")
abline(0,1, lty = 2)
par(old.par)


##in linear model plot, it seem that there are some predictions give negative value, but as to the real meaning- the frequency of specific algae, the nagative value is meaningless(at least is zero), so we have to fix this
sensible.lm.predictions.a1 <- ifelse(lm.predictions.a1 < 0, 0, lm.predictions.a1)

regr.eval(algae[, "a1"], lm.predictions.a1, stats = c("mae", "mse"))
##      mae       mse 
## 13.10681 295.54069
regr.eval(algae[, "a1"], sensible.lm.predictions.a1, stats = c("mae", "mse"))
##      mae       mse 
## 12.48276 286.28541




## according to the analysis aforementioned, choosing the regression tree model seem to be reasonable beacause it has a low NMSE value. But all the calculations and predictions actually could be bias. k fold cross validation is a typical tool we can make use of to access the viability of the models and this tool is suitable for the small dataset just like "algae" we used here. 

cv.rpart <- function(form, train, test, ...){
  m <- rpartXse(form, train, ...)
  p <- predict(m, test)
  mse <- mean((p - resp(form, test))^2)
  c(nmse = mse / mean((mean(resp(form, train)) - resp(form, test))^2))
}

cv.lm <- function(form, train, test, ...){
  m <- lm(form, train,...)
  p <- predict(m, test)
  p <- ifelse(p < 0, 0 ,p)
  mse <- mean((p - resp(form, train))^2)
  c(nmse = mse / mean((mean(resp(form, train)) - resp(form, test))^2))
}


res <- experimentalComparison(
  c(dataset(a1 ~ ., clean.algae[,1:12],'a1')),
  c(variants('cv.lm'),
  variants('cv.rpart', se = c(0,0.5,1))),
  cvSettings(3,10,1234))

summary(res)

plot(res)

## if want to know the parameter of every model of experimentalComparison() function
getVariant("cv.rpart.v1", res)
##
##Learner::  "cv.rpart" 
##
##Parameter values
##         se  =  0 


## we can perform all the 7 prediction task simultaneously
DSs <- sapply(names(clean.algae)[12:18],
  function(x,names.attrs){
    f <- as.formula(paste(x,"~ ."))
    dataset(f, clean.algae[,c(names.attrs,x)],x)
  },
  names(clean.algae)[1:11])

res.all <- experimentalComparison(
  DSs,
  c(variants('cv.lm'),
  variants('cv.rpart', se = c(0,0.5,1))
  ),
  cvSettings(5,10,1234))

plot(res.all)

bestScores(res.all)




## the above result suggest that , except for a1, all the kinds of algae do not have ideal predictions. It may tell us that it could be a better choice to use the combination method, and the combinatorial model could overcome the restriction of sigal model. The RandomForest is a competitive method of combinatorial model.

data(algae)
algae <- algae[-manyNAs(algae), ]
clean.algae <- knnImputation(algae, k = 10)

library(randomForest)

cv.rf <- function(form, train, test, ...){
  m <- randomForest(form, train,...)
  p <- predict(m, test)
  mse <- mean((p - resp(form, test))^2)
  c(nmse = mse / mean((mean(resp(form,train)) - resp(form,test))^2))
}


cv.rpart <- function(form, train, test, ...){
  m <- rpartXse(form, train, ...)
  p <- predict(m, test)
  mse <- mean((p - resp(form, test))^2)
  c(nmse = mse / mean((mean(resp(form, train)) - resp(form, test))^2))
}

cv.lm <- function(form, train, test, ...){
  m <- lm(form, train,...)
  p <- predict(m, test)
  p <- ifelse(p < 0, 0 ,p)
  mse <- mean((p - resp(form, train))^2)
  c(nmse = mse / mean((mean(resp(form, train)) - resp(form, test))^2))
}


DSs <- sapply(names(clean.algae)[12:18],
  function(x,names.attrs){
    f <- as.formula(paste(x,"~ ."))
    dataset(f, clean.algae[,c(names.attrs,x)],x)
  },
  names(clean.algae)[1:11])

res.all <- experimentalComparison(
  DSs,
  c(variants('cv.lm'),
  variants('cv.rpart', se = c(0,0.5,1)),
  variants('cv.rf', ntree = c(200,500,700))),cvSettings(5,10,1234)
)








